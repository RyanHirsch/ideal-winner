{
  // Place your feb20-react workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "React Redux mapDispatchToProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "::mDTP",
    "body": ["export function mapDispatchToProps(dispatch) {", "  return {", "    $1", "  }", "}"],
    "description": "Create a mapDispatchToProps function"
  },
  "React Redux mapStateToProps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "::mSTP",
    "body": [
      "export function mapStateToProps(state, ownProps) {",
      "  return {",
      "    $1",
      "  }",
      "}"
    ],
    "description": "Create a mapStateToProps function"
  },
  "React Redux Reducer": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "::reducer",
    "body": [
      "import * as actions from \"./actions\";",
      "",
      "const initialState = {};",
      "",
      "export default function reducer(state = initialState, action) {",
      "  switch(action.type) {",
      "    case $1:",
      "      return {",
      "        ...state,",
      "        $2",
      "      };",
      "    default: return state;",
      "  }",
      "}"
    ],
    "description": "Scaffold a reducer file"
  },
  "React Presentation Component": {
    "prefix": "::pres",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types'; // eslint-disable-line import/no-extraneous-dependencies",
      "",
      "export default function $1() {",
      "  return <div>$2</div>;",
      "}",
      "",
      "$1.propTypes = {}"
    ],
    "description": "Create a presentational react component"
  },
  "React Redux Connected Component": {
    "prefix": "::connect",
    "body": [
      "import React from 'react';",
      "import { connect } from 'react-redux';",
      "import { bindActionCreators } from 'redux';",
      "import PropTypes from 'prop-types'; // eslint-disable-line import/no-extraneous-dependencies",
      "",
      "import { actions } from \"../redux/$1/actions\";",
      "",
      "export class Unconnected${2:name} extends React.Component {",
      "  static propTypes = {};",
      "",
      "  state = {};",
      "",
      "  componentDidMount() {",
      "  }",
      "",
      "  render() {",
      "    return <div>${2:name}</div>;",
      "  }",
      "}",
      "",
      "function mapStateToProps(state, ownProps) {",
      "  return {};",
      "}",
      "",
      "function mapDispatchToProps(dispatch) {",
      "  return {",
      "    ...bindActionCreators(actions, dispatch),",
      "  };",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(Unconnected${2:name});",
      ""
    ],
    "description": "Create a react component that is connected to redux"
  }
}
